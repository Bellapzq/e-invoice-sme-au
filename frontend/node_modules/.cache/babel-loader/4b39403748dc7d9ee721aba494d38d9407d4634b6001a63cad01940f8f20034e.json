{"ast":null,"code":"var _jsxFileName = \"/Users/bella_pong/Desktop/presto/frontend/src/components/RenderText.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction RenderText({\n  textElements\n}) {\n  // Check if textElements array is empty\n  if (!textElements.length === 0) {\n    return null; // Render nothing if textElements is empty\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: textElements.slice().reverse().map((element, index) => {\n      if (element.element === 'text') {\n        return /*#__PURE__*/_jsxDEV(\"textarea\", {\n          style: {\n            // Size of element is based on the proportion of the deck width\n            width: `${element.size}%`,\n            // height: `${element.size }%`,\n            text: element.text,\n            fontSize: `${element.fontSize}em`,\n            color: element.colour,\n            // Always at the top left position\n            position: 'element.position',\n            top: element.top,\n            left: element.left,\n            // Left-aligned\n            textAlign: element.textAlign,\n            // Soft grey border\n            border: element.border,\n            // Cut overflowing content\n            overflow: element.overflow,\n            textOverflow: element.textOverflow,\n            whiteSpace: element.whiteSpace\n          },\n          defaultValue: element.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 13\n        }, this);\n      } else if (element.element === 'image') {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: element.image,\n          alt: element.alt,\n          style: {\n            width: `${element.size}%`,\n            // height: `${element.size }%`,\n            position: element.position,\n            top: element.top,\n            left: element.left\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this);\n      } else {\n        return null;\n      }\n    })\n  }, void 0, false);\n}\n_c = RenderText;\nexport default RenderText;\nvar _c;\n$RefreshReg$(_c, \"RenderText\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","RenderText","textElements","length","children","slice","reverse","map","element","index","style","width","size","text","fontSize","color","colour","position","top","left","textAlign","border","overflow","textOverflow","whiteSpace","defaultValue","fileName","_jsxFileName","lineNumber","columnNumber","src","image","alt","_c","$RefreshReg$"],"sources":["/Users/bella_pong/Desktop/presto/frontend/src/components/RenderText.jsx"],"sourcesContent":["import React from 'react';\n\nfunction RenderText ({ textElements }) {\n  // Check if textElements array is empty\n  if (!textElements.length === 0) {\n    return null; // Render nothing if textElements is empty\n  }\n  return (\n    <>\n      {textElements.slice().reverse().map((element, index) => {\n        if (element.element === 'text') {\n          return (\n            <textarea\n              key={index}\n              style={{\n                // Size of element is based on the proportion of the deck width\n                width: `${element.size}%`,\n                // height: `${element.size }%`,\n                text: element.text,\n                fontSize: `${element.fontSize}em`,\n                color: element.colour,\n                // Always at the top left position\n                position: 'element.position',\n                top: element.top,\n                left: element.left,\n                // Left-aligned\n                textAlign: element.textAlign,\n                // Soft grey border\n                border: element.border,\n                // Cut overflowing content\n                overflow: element.overflow,\n                textOverflow: element.textOverflow,\n                whiteSpace: element.whiteSpace,\n              }}\n              defaultValue={element.text}\n            />\n          );\n        } else if (element.element === 'image') {\n          return (\n            <img\n              key={index}\n              src={element.image}\n              alt={element.alt}\n              style={{\n                width: `${element.size}%`,\n                // height: `${element.size }%`,\n                position: element.position,\n                top: element.top,\n                left: element.left,\n              }}\n            />\n          );\n        } else {\n          return null;\n        }\n      })}\n    </>\n  );\n}\n\nexport default RenderText;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,UAAUA,CAAE;EAAEC;AAAa,CAAC,EAAE;EACrC;EACA,IAAI,CAACA,YAAY,CAACC,MAAM,KAAK,CAAC,EAAE;IAC9B,OAAO,IAAI,CAAC,CAAC;EACf;EACA,oBACEL,OAAA,CAAAE,SAAA;IAAAI,QAAA,EACGF,YAAY,CAACG,KAAK,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;MACtD,IAAID,OAAO,CAACA,OAAO,KAAK,MAAM,EAAE;QAC9B,oBACEV,OAAA;UAEEY,KAAK,EAAE;YACL;YACAC,KAAK,EAAG,GAAEH,OAAO,CAACI,IAAK,GAAE;YACzB;YACAC,IAAI,EAAEL,OAAO,CAACK,IAAI;YAClBC,QAAQ,EAAG,GAAEN,OAAO,CAACM,QAAS,IAAG;YACjCC,KAAK,EAAEP,OAAO,CAACQ,MAAM;YACrB;YACAC,QAAQ,EAAE,kBAAkB;YAC5BC,GAAG,EAAEV,OAAO,CAACU,GAAG;YAChBC,IAAI,EAAEX,OAAO,CAACW,IAAI;YAClB;YACAC,SAAS,EAAEZ,OAAO,CAACY,SAAS;YAC5B;YACAC,MAAM,EAAEb,OAAO,CAACa,MAAM;YACtB;YACAC,QAAQ,EAAEd,OAAO,CAACc,QAAQ;YAC1BC,YAAY,EAAEf,OAAO,CAACe,YAAY;YAClCC,UAAU,EAAEhB,OAAO,CAACgB;UACtB,CAAE;UACFC,YAAY,EAAEjB,OAAO,CAACK;QAAK,GArBtBJ,KAAK;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAsBX,CAAC;MAEN,CAAC,MAAM,IAAIrB,OAAO,CAACA,OAAO,KAAK,OAAO,EAAE;QACtC,oBACEV,OAAA;UAEEgC,GAAG,EAAEtB,OAAO,CAACuB,KAAM;UACnBC,GAAG,EAAExB,OAAO,CAACwB,GAAI;UACjBtB,KAAK,EAAE;YACLC,KAAK,EAAG,GAAEH,OAAO,CAACI,IAAK,GAAE;YACzB;YACAK,QAAQ,EAAET,OAAO,CAACS,QAAQ;YAC1BC,GAAG,EAAEV,OAAO,CAACU,GAAG;YAChBC,IAAI,EAAEX,OAAO,CAACW;UAChB;QAAE,GATGV,KAAK;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUX,CAAC;MAEN,CAAC,MAAM;QACL,OAAO,IAAI;MACb;IACF,CAAC;EAAC,gBACF,CAAC;AAEP;AAACI,EAAA,GAxDQhC,UAAU;AA0DnB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}